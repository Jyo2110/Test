name: Release Workflow

# run-name: Release ${{ github.event.inputs.release_version }} (${{ github.event.inputs.release_type }} release)

on:
  workflow_dispatch:
    inputs:
      # release_version:
      #   description: 'Version of the release'
      #   required: true
      #   default: '1.0.0'
      release_type:
        description: 'Type of release (e.g., Major, Minor, Patch)'
        required: true
        options:
        - minor
        - major
        - patch
jobs:
  release:
    runs-on: ubuntu-latest

    name: Release from ${{ steps.get_prev_version.outputs.prev_version }} (${{ github.event.inputs.release_type }} release)

    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # - name: Get release type from PR labels
      #   id: release_type
      #   run: |
      #     LABELS=$(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH")
      #     RELEASE_TYPE="patch"
      #     for label in $LABELS; do
      #       case "$label" in
      #         release:major) RELEASE_TYPE="major" ;;
      #         release:minor) RELEASE_TYPE="minor" ;;
      #         release:patch) RELEASE_TYPE="patch" ;;
      #       esac
      #     done
      #     echo "ðŸ”– Release type: $RELEASE_TYPE"
      #     echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

      - name: Get previous version tag
        id: get_prev_version
        run: |
          TAG=$(git tag -l | sort -V | tail -n 1)
          echo "Previous version tag: $TAG"
          echo "prev_version=$TAG" >> $GITHUB_OUTPUT

    
      - name: Get current versions
        id: get_version
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release_type }}
        run: |
          TAG=$(git tag -l | sort -V | tail -n 1)
          if [ -z "$TAG" ]; then TAG="v2.1 .0"; fi

          VERSION=${TAG#v}
          IFS='.' read -r -a PARTS <<< "$VERSION"
          MAJOR=${PARTS[0]}
          MINOR=${PARTS[1]}
          PATCH=${PARTS[2]}

          TYPE="${RELEASE_TYPE}"

          if [ "$TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
          elif [ "$TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1)); PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION ($TYPE release)"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create new tag
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release_type }}
        run: |
          echo "ðŸ”– Tagging release: ${{ env.new_version }} ($RELEASE_TYPE release)"
          git tag -a "${{ env.new_version }}" -m "Release ${{ env.new_version }} ($RELEASE_TYPE release)"
          git push origin "${{ env.new_version }}"


      # - name: Create GitHub Release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ env.new_version }}
      #     release_name: Release ${{ env.new_version }} (${{ steps.release_type.outputs.release_type }} release)
      #     body: |
      #       ## Changes in this Release
      #       - ðŸ”– Version: ${{ env.new_version }}
      #       - ðŸ“¦ Type: ${{ steps.release_type.outputs.release_type }}
      #       - Automated release via GitHub Actions.
      #     draft: false
      #     prerelease: false          
