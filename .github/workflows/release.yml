name: Versioning and Create GitHub Release

on: push
  

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Git user for tagging
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # Step 3: Get the current version
      - name: Get current version
        id: get_version
        run: |
          # Get the latest git tag (or set default if no tags exist)
          TAG=$(git tag -l | sort -V | tail -n 1)  # List tags, sort them, and get the latest one

          # If no tags exist, set initial version to v0.1.0
          if [ -z "$TAG" ]; then
            TAG="v0.1.0"
          fi

          echo "Current tag: $TAG"

          # Extract the version numbers (major.minor.patch)
          VERSION=${TAG#v}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment the patch version by 1 (you can modify this for minor/major version bumps)
          PATCH=$((PATCH + 1))

          # Create new version string
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"

          # Set new version as output for later steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      # Step 4: Tag the new release version
      - name: Create new tag
        run: |
          # Create a new Git tag
          git tag -a "${{ env.new_version }}" -m "Release ${{ env.new_version }}"
          
          # Push the tag to GitHub
          git push origin "${{ env.new_version }}"

      # Step 5: Create GitHub release with the new tag
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_version }}  # Use the new version tag from the environment
          release_name: Release ${{ env.new_version }}  # Use the new version in the release name
          body: |
            ## Changes in this Release
            - Updated version to ${{ env.new_version }}
            - Automatic version increment and release generation.
          draft: false
          prerelease: false
